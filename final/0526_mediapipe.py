{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c60dd1ab-5cb1-4ad8-82c1-df1c3457e984",
   "metadata": {},
   "outputs": [],
   "source": [
    "#!/usr/bin/env python3\n",
    "\n",
    "# subscriber_dlib에서 위험인 id 받아서 해당 id의 바운딩 박스 안에서만 포즈를 감지\n",
    "\n",
    "#!/usr/bin/env python3\n",
    "\n",
    "import rospy\n",
    "import cv2\n",
    "import numpy as np\n",
    "from sensor_msgs.msg import Image\n",
    "from std_msgs.msg import Float32MultiArray, Int32\n",
    "from cv_bridge import CvBridge\n",
    "import mediapipe as mp\n",
    "\n",
    "class DangerousPoseTracker:\n",
    "    def __init__(self):\n",
    "        rospy.init_node(\"subscriber_mediapipe\")\n",
    "\n",
    "        self.bridge = CvBridge()\n",
    "        self.dangerous_id = -1\n",
    "        self.latest_image = None\n",
    "        self.person_detections = []\n",
    "\n",
    "        # MediaPipe Pose model\n",
    "        self.mp_pose = mp.solutions.pose\n",
    "        self.pose = self.mp_pose.Pose(static_image_mode=False, model_complexity=1, enable_segmentation=False)\n",
    "\n",
    "        # ROS Publishers and Subscribers\n",
    "        self.pose_pub = rospy.Publisher(\"/dangerous_pose\", Float32MultiArray, queue_size=1)\n",
    "        rospy.Subscriber(\"/depth/RGB_image\", Image, self.rgb_callback, queue_size=1)\n",
    "        rospy.Subscriber(\"/SORT/person_bbox_with_id\", Float32MultiArray, self.bbox_callback, queue_size=1)\n",
    "        rospy.Subscriber(\"/dangerous_id\", Int32, self.dangerous_id_callback, queue_size=1)\n",
    "\n",
    "        self.run()\n",
    "\n",
    "    def rgb_callback(self, msg):\n",
    "        try:\n",
    "            self.latest_image = self.bridge.imgmsg_to_cv2(msg, \"bgr8\")\n",
    "        except Exception as e:\n",
    "            rospy.logerr(\"Failed to convert RGB image: %s\", str(e))\n",
    "\n",
    "    def dangerous_id_callback(self, msg):\n",
    "        self.dangerous_id = msg.data\n",
    "        rospy.loginfo_throttle(3, f\"[mediapipe] Dangerous ID: {self.dangerous_id}\")\n",
    "\n",
    "    def bbox_callback(self, msg):\n",
    "        if len(msg.data) == 5:\n",
    "            self.person_detections = [list(map(int, msg.data))]  # single person\n",
    "        else:\n",
    "            self.person_detections = [\n",
    "                list(map(int, msg.data[i:i+5]))\n",
    "                for i in range(0, len(msg.data), 5)\n",
    "            ]\n",
    "\n",
    "    def run(self):\n",
    "        rate = rospy.Rate(10)\n",
    "        while not rospy.is_shutdown():\n",
    "            if self.latest_image is None or not self.person_detections:\n",
    "                rate.sleep()\n",
    "                continue\n",
    "\n",
    "            for bbox in self.person_detections:\n",
    "                x1, y1, x2, y2, pid = bbox\n",
    "                if pid != self.dangerous_id:\n",
    "                    continue\n",
    "\n",
    "                roi = self.latest_image[y1:y2, x1:x2].copy()\n",
    "                rgb_roi = cv2.cvtColor(roi, cv2.COLOR_BGR2RGB)\n",
    "                result = self.pose.process(rgb_roi)\n",
    "\n",
    "                if result.pose_landmarks:\n",
    "                    # Draw landmarks\n",
    "                    mp.solutions.drawing_utils.draw_landmarks(\n",
    "                        roi, result.pose_landmarks, self.mp_pose.POSE_CONNECTIONS)\n",
    "                    cv2.putText(roi, f\"Dangerous ID: {pid}\", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)\n",
    "                    cv2.imshow(\"Pose of Dangerous Person\", roi)\n",
    "                    cv2.waitKey(1)\n",
    "\n",
    "                    # Publish landmarks\n",
    "                    pose_msg = Float32MultiArray()\n",
    "                    pose_data = [pid]  # Start with ID\n",
    "                    for lm in result.pose_landmarks.landmark:\n",
    "                        pose_data.extend([lm.x, lm.y, lm.z])\n",
    "                    pose_msg.data = pose_data\n",
    "                    self.pose_pub.publish(pose_msg)\n",
    "\n",
    "            rate.sleep()\n",
    "\n",
    "        cv2.destroyAllWindows()\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    try:\n",
    "        DangerousPoseTracker()\n",
    "    except rospy.ROSInterruptException:\n",
    "        pass\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# main에 아래 내용추가해야함\n",
    "# 콜백 정의\n",
    "# subscriber 등록\n",
    "# 특정 포즈의 경우 warning 문구 표시\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
